import tkinter as tk
from tkinter import Canvas
import threading
import time
import random
import math
from enum import Enum


N = 5  
RAIO_MESA = 300  
RAIO_PRATO = 60  
CENTRO_X = 400   
CENTRO_Y = 350
ANGULO_FILOSOFOS = 360 / N


class Estado(Enum):
    PENSAR = 0
    FOME = 1
    COMER = 2


CORES = {
    Estado.PENSAR: "#FFA500",  
    Estado.FOME: "#FF0000",  
    Estado.COMER: "green"    
}


TEXTOS = {
    Estado.PENSAR: "PENSANDO",
    Estado.FOME: "FAMINTO",
    Estado.COMER: "COMENDO"
}

class JantarDosFilosofos:
    def __init__(self, root):
        self.root = root
        self.root.title("Problema do Jantar dos Fil√≥sofos")
        self.root.geometry("800x700")  
        
        
        self.canvas = Canvas(root, width=900, height=700, bg="white")
        self.canvas.pack()
        
        
        self.estados = [Estado.PENSAR for _ in range(N)]
        self.mutex = threading.Lock()
        self.semaforos = [threading.Semaphore(0) for _ in range(N)]
        
        
        for i in range(N):
            filosofo_thread = threading.Thread(
                target=self.filosofo, 
                args=(i,),
                daemon=True
            )
            filosofo_thread.start()
        
        
        self.atualizar_gui()
    
    def filosofo(self, i):
        
        while True:
            self.pensar(i)
            self.agarra_garfo(i)
            self.comer(i)
            self.deixa_garfo(i)
    
    def pensar(self, i):
        
        with self.mutex:
            self.estados[i] = Estado.PENSAR
        time.sleep(random.uniform(1, 3))
    
    def comer(self, i):
        
        time.sleep(random.uniform(1, 3))
    
    def agarra_garfo(self, i):
        
        with self.mutex:
            self.estados[i] = Estado.FOME
            self.testar(i)
        
        
        self.semaforos[i].acquire()
    
    def deixa_garfo(self, i):
        
        with self.mutex:
            self.estados[i] = Estado.PENSAR
            self.testar((i - 1) % N)  
            self.testar((i + 1) % N)  
    
    def testar(self, i):
        
        if (self.estados[i] == Estado.FOME and
            self.estados[(i - 1) % N] != Estado.COMER and
            self.estados[(i + 1) % N] != Estado.COMER):
            
            self.estados[i] = Estado.COMER
            self.semaforos[i].release()
    
    def desenhar_mesa(self):
        
        self.canvas.delete("all")
        
        
        self.canvas.create_oval(
            CENTRO_X - RAIO_MESA, CENTRO_Y - RAIO_MESA,
            CENTRO_X + RAIO_MESA, CENTRO_Y + RAIO_MESA,
            fill="#f0f0f0", outline="black", width=2
        )
        
        
        for i in range(N):
            angulo = i * ANGULO_FILOSOFOS
            rad = math.radians(angulo)
            x = CENTRO_X + (RAIO_MESA * 0.7) * math.cos(rad)
            y = CENTRO_Y - (RAIO_MESA * 0.7) * math.sin(rad)
            
            
            cor = CORES[self.estados[i]]
            self.canvas.create_oval(
                x - RAIO_PRATO, y - RAIO_PRATO,
                x + RAIO_PRATO, y + RAIO_PRATO,
                fill=cor, outline="black", width=2
            )
            
            
            texto = TEXTOS[self.estados[i]]
            self.canvas.create_text(
                x, y - RAIO_PRATO - 20,
                text=texto,
                font=("Arial", 10, "bold")
            )
            
            
            self.canvas.create_text(
                x, y,
                text=str(i+1),
                font=("Arial", 14, "bold")
            )
    
    def atualizar_gui(self):
        """Atualiza a interface periodicamente"""
        self.desenhar_mesa()
        self.root.after(100, self.atualizar_gui)


if __name__ == "__main__":
    root = tk.Tk()
    app = JantarDosFilosofos(root)
    root.mainloop()